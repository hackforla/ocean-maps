{"version":3,"sources":["store/configureStore.js","containers/Root.js","components/Map.js","containers/App.js","containers/Root.prod.js","serviceWorker.js","index.js","reducers/index.js","store/configureStore.prod.js"],"names":["module","exports","require","Map","props","viewSize","x","y","id","width","mapboxApiAccessToken","process","REACT_APP_MAPBOX","height","App","store","configureStore","Root","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","rootReducer","combineReducers","keplerGl","keplerGlReducer","app","state","middlewares","enhanceReduxMiddleware","thunk","enhancers","applyMiddleware","preloadedState","createStore","compose"],"mappings":"yHACEA,EAAOC,QAAUC,EAAQ,M,oBCAzBF,EAAOC,QAAUC,EAAQ,M,gMCeZC,EAZH,SAAAC,GAAU,IAAD,EACFC,MAATC,EADW,EACXA,EAAGC,EADQ,EACRA,EACX,OACE,kBAAC,IAAD,CACEC,GAAG,MACHC,MAAOH,EACPI,qBAAsBC,8CAAYC,iBAClCC,OAAQN,KCCCO,MARf,WACE,OACE,6BACE,kBAAC,EAAD,Q,SCDAC,E,MAAQC,KAiBCC,UAfF,kBACX,kBAAC,WAAD,CAAUF,MAAOA,GAMf,kBAAC,EAAD,S,wGCHgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMP,EAAQC,MAEdO,iBACE,6BACE,kBAAC,IAAD,CAAMR,MAAOA,KAEfS,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,yFE3HJC,EALKC,YAAgB,CAClCC,SAAUC,IACVC,IAAK,eAACC,EAAD,uDAAS,GAAT,wCAAwBA,K,SCAzBC,EAAcC,iCAAuB,CAACC,MACtCC,EAAY,CAACC,IAAe,WAAf,cAAmBJ,KAOvBtB,UALQ,SAAA2B,GAAc,OAAIC,YACvCZ,EACAW,EAAgBE,IAAO,WAAP,EAAWJ,O","file":"static/js/main.41d0205e.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod')\n} else {\n  module.exports = require('./configureStore.dev')\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./Root.prod')\n} else {\n  module.exports = require('./Root.dev')\n}\n","import KeplerGl from 'kepler.gl';\nimport React from \"react\";\nimport viewSize from \"view-size\";\n\nconst Map = props => {\n  const { x, y } = viewSize();\n  return (\n    <KeplerGl\n      id=\"foo\"\n      width={x}\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX}\n      height={y}\n    />\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport 'normalize.css';\nimport Map from \"../components/Map\"\n\nfunction App() {\n  return (\n    <div>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Provider } from 'react-redux'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport App from './App'\nimport configureStore from \"../store/configureStore\";\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    {/*<Router>*/}\n    {/*  <Switch>*/}\n    {/*    <Route path=\"/\" component={App} />*/}\n    {/*  </Switch>*/}\n    {/*</Router>*/}\n    <App />\n  </Provider>\n);\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n};\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\nimport configureStore from './store/configureStore'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nrender(\n  <div>\n    <Root store={store} />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux'\nimport keplerGlReducer from 'kepler.gl/reducers';\n\nconst rootReducer = combineReducers({\n  keplerGl: keplerGlReducer,\n  app: (state = {}, action) => state\n});\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport { enhanceReduxMiddleware } from 'kepler.gl/middleware';\n\nconst middlewares = enhanceReduxMiddleware([thunk]);\nconst enhancers = [applyMiddleware(...middlewares)];\n\nconst configureStore = preloadedState => createStore(\n  rootReducer,\n  preloadedState, compose(...enhancers)\n);\n\nexport default configureStore\n"],"sourceRoot":""}